{"task_id": "HumanEval/75", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_75_vanilla import is_multiply_prime\n\ndef test_is_multiply_prime_case_1():\n\tassert is_multiply_prime(30) == True\n\n\ndef test_is_multiply_prime_case_2():\n\tassert is_multiply_prime(31) == False\n\n\ndef test_is_multiply_prime_case_3():\n\tassert is_multiply_prime(100) == False\n\n\ndef test_is_multiply_prime_case_4():\n\tassert is_multiply_prime(30030) == True\n\n\ndef test_is_multiply_prime_case_5():\n\tassert is_multiply_prime(100003) == False\n\n\ndef test_is_multiply_prime_case_6():\n\tassert is_multiply_prime(2*3*5*7*11) == True\n\n\ndef test_is_multiply_prime_case_7():\n\tassert is_multiply_prime(2*3*5*7*11*13*17) == False\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/42", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n    return [(e + 1) for e in l]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_42_vanilla import incr_list\n\ndef test_incr_list_case_1():\n\tassert incr_list([1, 2, 3]) == [2, 3, 4]\n\n\ndef test_incr_list_case_2():\n\tassert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n\ndef test_incr_list_case_3():\n\tassert incr_list([]) == []\n\n\ndef test_incr_list_case_4():\n\tassert incr_list([-1, 0, 1]) == [0, 1, 2]\n\n\ndef test_incr_list_case_5():\n\tassert incr_list([10, 20, 30]) == [11, 21, 31]\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/154", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_154_vanilla import cycpattern_check\n\ndef test_cycpattern_check_case_1():\n\tassert cycpattern_check(\"abcd\",\"abd\") == False\n\n\ndef test_cycpattern_check_case_2():\n\tassert cycpattern_check(\"hello\",\"ell\") == True\n\n\ndef test_cycpattern_check_case_3():\n\tassert cycpattern_check(\"whassup\",\"psus\") == False\n\n\ndef test_cycpattern_check_case_4():\n\tassert cycpattern_check(\"abab\",\"baa\") == True\n\n\ndef test_cycpattern_check_case_5():\n\tassert cycpattern_check(\"efef\",\"eeff\") == False\n\n\ndef test_cycpattern_check_case_6():\n\tassert cycpattern_check(\"himenss\",\"simen\") == True\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/137", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_137_vanilla import compare_one\n\ndef test_compare_one_case_1():\n\tassert compare_one(1, 2.5) == 2.5\n\n\ndef test_compare_one_case_2():\n\tassert compare_one(1, \"2,3\") == \"2,3\"\n\n\ndef test_compare_one_case_3():\n\tassert compare_one(\"5,1\", \"6\") == \"6\"\n\n\ndef test_compare_one_case_4():\n\tassert compare_one(\"1\", 1) == None\n\n\ndef test_compare_one_case_5():\n\tassert compare_one(1, 1) == None\n\n\ndef test_compare_one_case_6():\n\tassert compare_one(\"1.2\", \"2,3\") == \"2,3\"\n\n\ndef test_compare_one_case_7():\n\tassert compare_one(\"5,1\", 6) == \"6\"\n\n\ndef test_compare_one_case_8():\n\tassert compare_one(5.1, 6) == 6\n\n\ndef test_compare_one_case_9():\n\tassert compare_one(\"1\", 1.0) == None\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/126", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_126_vanilla import is_sorted\n\ndef test_is_sorted_case_1():\n\tassert is_sorted([5]) == True\n\n\ndef test_is_sorted_case_2():\n\tassert is_sorted([1, 2, 3, 4, 5]) == True\n\n\ndef test_is_sorted_case_3():\n\tassert is_sorted([1, 3, 2, 4, 5]) == False\n\n\ndef test_is_sorted_case_4():\n\tassert is_sorted([1, 2, 3, 4, 5, 6]) == True\n\n\ndef test_is_sorted_case_5():\n\tassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n\n\ndef test_is_sorted_case_6():\n\tassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\n\n\ndef test_is_sorted_case_7():\n\tassert is_sorted([1, 2, 2, 3, 3, 4]) == True\n\n\ndef test_is_sorted_case_8():\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/140", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_140_vanilla import fix_spaces\n\ndef test_fix_spaces_case_1():\n\tassert fix_spaces(\"Example\") == \"Example\"\n\n\ndef test_fix_spaces_case_2():\n\tassert fix_spaces(\"Example 1\") == \"Example_1\"\n\n\ndef test_fix_spaces_case_3():\n\tassert fix_spaces(\" Example 2\") == \"_Example_2\"\n\n\ndef test_fix_spaces_case_4():\n\tassert fix_spaces(\" Example   3\") == \"_Example-3\"\n\n\ndef test_fix_spaces_case_5():\n\tassert fix_spaces(\"  Example  4  \") == \"_-Example-4-\"\n\n\ndef test_fix_spaces_case_6():\n\tassert fix_spaces(\"\") == \"\"\n\n\ndef test_fix_spaces_case_7():\n\tassert fix_spaces(\"  \") == \"-\"\n\n\n", "coverage": 94.73684210526316}
{"task_id": "HumanEval/88", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_88_vanilla import sort_array\n\ndef test_sort_array_case_1():\n\tassert sort_array([]) == []\n\n\ndef test_sort_array_case_2():\n\tassert sort_array([5]) == [5]\n\n\ndef test_sort_array_case_3():\n\tassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n\n\ndef test_sort_array_case_4():\n\tassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\ndef test_sort_array_case_5():\n\tassert sort_array([2, 3, 1, 5, 4]) == [1, 2, 3, 4, 5]  # test with ascending order\n\n\ndef test_sort_array_case_6():\n\tassert sort_array([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]  # test with descending order\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/17", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_17_vanilla import parse_music\n\ndef test_parse_music_case_1():\n\tassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n\ndef test_parse_music_case_2():\n\tassert parse_music('o o| o| o| o| o| o| o| o| o|') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n\n\ndef test_parse_music_case_3():\n\tassert parse_music('') == []\n\n\ndef test_parse_music_case_4():\n\tassert parse_music('o o| .| .| .| .| .| .| .| .| .|') == [4, 2, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\ndef test_parse_music_case_5():\n\tassert parse_music('o o| o| o| o| o| o| o| o| o| .|') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1]\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/13", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n    return a\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_13_vanilla import greatest_common_divisor\n\ndef test_greatest_common_divisor_case_1():\n\tassert greatest_common_divisor(3, 5) == 1\n\n\ndef test_greatest_common_divisor_case_2():\n\tassert greatest_common_divisor(25, 15) == 5\n\n\ndef test_greatest_common_divisor_case_3():\n\tassert greatest_common_divisor(100, 50) == 50\n\n\ndef test_greatest_common_divisor_case_4():\n\tassert greatest_common_divisor(17, 13) == 1\n\n\ndef test_greatest_common_divisor_case_5():\n\tassert greatest_common_divisor(10, 0) == 10\n\n\ndef test_greatest_common_divisor_case_6():\n\tassert greatest_common_divisor(0, 10) == 10\n\n\ndef test_greatest_common_divisor_case_7():\n\tassert greatest_common_divisor(0, 0) == 0\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/61", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_61_vanilla import correct_bracketing\n\ndef test_correct_bracketing_case_1():\n\tassert correct_bracketing(\"(\") == False\n\n\ndef test_correct_bracketing_case_2():\n\tassert correct_bracketing(\"()\") == True\n\n\ndef test_correct_bracketing_case_3():\n\tassert correct_bracketing(\"(()())\") == True\n\n\ndef test_correct_bracketing_case_4():\n\tassert correct_bracketing(\")(()\") == False\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/57", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_57_vanilla import monotonic\n\ndef test_monotonic_increasing_case_1():\n\tassert monotonic([1, 2, 4, 20]) == True\n\n\ndef test_monotonic_decreasing_case_1():\n\tassert monotonic([4, 1, 0, -10]) == True\n\n\ndef test_monotonic_not_monotonic_case_1():\n\tassert monotonic([1, 20, 4, 10]) == False\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/125", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_125_vanilla import split_words\n\ndef test_split_words_case_1():\n\tassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n\n\ndef test_split_words_case_2():\n\tassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n\n\ndef test_split_words_case_3():\n\t\n\tpass\n\n\n", "coverage": 83.33333333333333}
{"task_id": "HumanEval/5", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_5_vanilla import intersperse\n\ndef test_intersperse_empty_list_case_1():\n\tassert intersperse([], 4) == []\n\n\ndef test_intersperse_single_element_case_1():\n\tassert intersperse([1], 4) == [1]\n\n\ndef test_intersperse_multiple_elements_case_1():\n\tassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n\n\ndef test_intersperse_negative_numbers_case_1():\n\tassert intersperse([-1, -2, -3], 0) == [-1, 0, -2, 0, -3]\n\n\ndef test_intersperse_zero_case_1():\n\tassert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/84", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_84_vanilla import solve\n\ndef test_solve_case_1():\n\tassert solve(1000) == \"1\"\n\n\ndef test_solve_case_2():\n\tassert solve(150) == \"110\"\n\n\ndef test_solve_case_3():\n\tassert solve(147) == \"1100\"\n\n\ndef test_solve_case_4():\n\tassert solve(0) == \"0\"\n\n\ndef test_solve_case_5():\n\tassert solve(1) == \"1\"\n\n\ndef test_solve_case_6():\n\tassert solve(2) == \"10\"\n\n\ndef test_solve_case_7():\n\tassert solve(3) == \"11\"\n\n\ndef test_solve_case_8():\n\tassert solve(4) == \"100\"\n\n\ndef test_solve_case_9():\n\tassert solve(5) == \"101\"\n\n\ndef test_solve_case_10():\n\tassert solve(6) == \"110\"\n\n\ndef test_solve_case_11():\n\tassert solve(7) == \"111\"\n\n\ndef test_solve_case_12():\n\tassert solve(8) == \"1000\"\n\n\ndef test_solve_case_13():\n\tassert solve(9) == \"1001\"\n\n\ndef test_solve_case_14():\n\tassert solve(10) == \"1010\"\n\n\ndef test_solve_case_15():\n\tassert solve(11) == \"1011\"\n\n\ndef test_solve_case_16():\n\tassert solve(12) == \"1100\"\n\n\ndef test_solve_case_17():\n\tassert solve(13) == \"1101\"\n\n\ndef test_solve_case_18():\n\tassert solve(14) == \"1110\"\n\n\ndef test_solve_case_19():\n\tassert solve(15) == \"1111\"\n\n\ndef test_solve_case_20():\n\tassert solve(16) == \"10000\"\n\n\ndef test_solve_case_21():\n\tassert solve(17) == \"10001\"\n\n\ndef test_solve_case_22():\n\tassert solve(18) == \"10010\"\n\n\ndef test_solve_case_23():\n\tassert solve(19) == \"10011\"\n\n\ndef test_solve_case_24():\n\tassert solve(20) == \"10100\"\n\n\ndef test_solve_case_25():\n\tassert solve(255) == \"11111111\"\n\n\ndef test_solve_case_26():\n\tassert solve(1023) == \"1111111111\"\n\n\ndef test_solve_case_27():\n\tassert solve(2047) == \"11111111111111\"\n\n\ndef test_solve_case_28():\n\tassert solve(32767) == \"11111111111111111111111\"\n\n\ndef test_solve_case_29():\n\tassert solve(65535) == \"11111111111111111111111111111111\"\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/39", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_39_vanilla import prime_fib\n\ndef test_prime_fib_case_1():\n\tassert prime_fib(1) == 2\n\n\ndef test_prime_fib_case_2():\n\tassert prime_fib(2) == 3\n\n\ndef test_prime_fib_case_3():\n\tassert prime_fib(3) == 5\n\n\ndef test_prime_fib_case_4():\n\tassert prime_fib(4) == 13\n\n\ndef test_prime_fib_case_5():\n\tassert prime_fib(5) == 89\n\n\ndef test_prime_fib_case_6():\n\tassert prime_fib(6) == 233\n\n\ndef test_prime_fib_case_7():\n\tassert prime_fib(7) == 577\n\n\ndef test_prime_fib_case_8():\n\tassert prime_fib(8) == 1597\n\n\ndef test_prime_fib_case_9():\n\tassert prime_fib(9) == 4637\n\n\ndef test_prime_fib_case_10():\n\tassert prime_fib(10) == 14294\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/161", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_161_vanilla import solve\n\ndef test_solve_case_1():\n\tassert solve(\"1234\") == \"4321\"\n\n\ndef test_solve_case_2():\n\tassert solve(\"ab\") == \"AB\"\n\n\ndef test_solve_case_3():\n\tassert solve(\"#a@C\") == \"#A@c\"\n\n\ndef test_solve_case_4():\n\tassert solve(\"\") == \"\"\n\n\ndef test_solve_case_5():\n\tassert solve(\"aBc\") == \"AbC\"\n\n\ndef test_solve_case_6():\n\tassert solve(\"ABC\") == \"abc\"\n\n\ndef test_solve_case_7():\n\tassert solve(\"123abc\") == \"321ABC\"\n\n\ndef test_solve_case_8():\n\tassert solve(\"123ABC\") == \"321abc\"\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/106", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_106_vanilla import f\n\ndef test_f_case_1():\n\tassert f(1) == [1]\n\n\ndef test_f_case_2():\n\tassert f(2) == [1, 2]\n\n\ndef test_f_case_3():\n\tassert f(3) == [1, 2, 6]\n\n\ndef test_f_case_4():\n\tassert f(4) == [1, 2, 6, 10]\n\n\ndef test_f_case_5():\n\tassert f(5) == [1, 2, 6, 24, 15]\n\n\ndef test_f_case_6():\n\tassert f(6) == [1, 2, 6, 24, 15, 15]\n\n\ndef test_f_case_7():\n\tassert f(7) == [1, 2, 6, 24, 15, 15, 42]\n\n\ndef test_f_case_8():\n\tassert f(8) == [1, 2, 6, 24, 15, 15, 42, 105]\n\n\ndef test_f_case_9():\n\tassert f(9) == [1, 2, 6, 24, 15, 15, 42, 105, 420]\n\n\ndef test_f_case_10():\n\tassert f(10) == [1, 2, 6, 24, 15, 15, 42, 105, 420, 1330]\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/21", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_21_vanilla import rescale_to_unit\n\ndef test_rescale_to_unit_case_1():\n\tassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\n\ndef test_rescale_to_unit_case_2():\n\tassert rescale_to_unit([0.0, 0.0, 0.0, 0.0, 0.0]) == [0.0, 0.0, 0.0, 0.0, 0.0]\n\n\ndef test_rescale_to_unit_case_3():\n\tassert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\n\ndef test_rescale_to_unit_case_4():\n\tassert rescale_to_unit([-1.0, -2.0, -3.0, -4.0, -5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n\n\ndef test_rescale_to_unit_case_5():\n\tassert rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]) == [0.0, 0.0, 0.0, 0.0, 0.0]\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/58", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_58_vanilla import common\n\ndef test_common_empty_case_1():\n\tassert common([], []) == []\n\n\ndef test_common_one_empty_case_1():\n\tassert common([1, 2, 3], []) == []\n\n\ndef test_common_one_empty_case_2():\n\tassert common([], [1, 2, 3]) == []\n\n\ndef test_common_no_common_case_1():\n\tassert common([1, 2, 3], [4, 5, 6]) == []\n\n\ndef test_common_some_common_case_1():\n\tassert common([1, 2, 3], [2, 3, 4]) == [2, 3]\n\n\ndef test_common_some_common_case_2():\n\tassert common([1, 2, 2, 3], [2, 3, 4]) == [2, 3]\n\n\ndef test_common_some_common_case_3():\n\tassert common([1, 1, 2, 2, 3], [2, 2, 3, 4]) == [2, 3]\n\n\ndef test_common_all_common_case_1():\n\tassert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n\n\ndef test_common_all_common_case_2():\n\tassert common([1, 1, 2, 2, 3], [1, 1, 2, 2, 3]) == [1, 2, 3]\n\n\ndef test_common_duplicates_case_1():\n\tassert common([1, 1, 2, 2, 3], [1, 1, 2, 2, 3]) == [1, 2, 3]\n\n\ndef test_common_duplicates_case_2():\n\tassert common([1, 2, 2, 3], [1, 1, 2, 2, 3]) == [1, 2, 3]\n\n\n", "coverage": 100.0}
{"task_id": "HumanEval/102", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_102_vanilla import choose_num\n\ndef test_choose_num_case_1():\n\tassert choose_num(12, 15) == 14\n\n\ndef test_choose_num_case_2():\n\tassert choose_num(13, 12) == -1\n\n\ndef test_choose_num_case_3():\n\tassert choose_num(14, 15) == 14\n\n\ndef test_choose_num_case_4():\n\tassert choose_num(15, 16) == 16\n\n\ndef test_choose_num_case_5():\n\tassert choose_num(16, 16) == -1\n\n\ndef test_choose_num_case_6():\n\tassert choose_num(17, 18) == 16\n\n\ndef test_choose_num_case_7():\n\tassert choose_num(18, 19) == 18\n\n\ndef test_choose_num_case_8():\n\tassert choose_num(19, 20) == 18\n\n\ndef test_choose_num_case_9():\n\tassert choose_num(20, 21) == 20\n\n\ndef test_choose_num_case_10():\n\tassert choose_num(21, 22) == -1\n\n\n", "coverage": 87.5}
