{"task_id": "HumanEval/75", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_75.py` instead of redefining it.\n\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_75 import is_multiply_prime\n\ndef test_is_multiply_prime():\n    assert is_multiply_prime(30) == True\n    assert is_multiply_prime(45) == False\n    assert is_multiply_prime(60) == True\n    assert is_multiply_prime(120) == False\n    assert is_multiply_prime(135) == True\n    assert is_multiply_prime(180) == False\n    assert is_multiply_prime(270) == True\n    assert is_multiply_prime(300) == False", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:21:59.165787\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_75.py\": {\"executed_lines\": [2, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23], \"summary\": {\"covered_lines\": 13, \"num_statements\": 14, \"percent_covered\": 92.85714285714286, \"percent_covered_display\": \"93\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [24], \"excluded_lines\": [], \"functions\": {\"is_multiply_prime\": {\"executed_lines\": [11, 17, 18, 19, 20, 21, 22, 23], \"summary\": {\"covered_lines\": 8, \"num_statements\": 9, \"percent_covered\": 88.88888888888889, \"percent_covered_display\": \"89\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [24], \"excluded_lines\": []}, \"is_multiply_prime.is_prime\": {\"executed_lines\": [12, 13, 14, 15], \"summary\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23], \"summary\": {\"covered_lines\": 13, \"num_statements\": 14, \"percent_covered\": 92.85714285714286, \"percent_covered_display\": \"93\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [24], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 13, \"num_statements\": 14, \"percent_covered\": 92.85714285714286, \"percent_covered_display\": \"93\", \"missing_lines\": 1, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/42", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_42.py` instead of redefining it.\n\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n    return [(e + 1) for e in l]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_42 import incr_list\n\ndef test_incr_list():\n    assert incr_list([1, 2, 3]) == [2, 3, 4]\n    assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    assert incr_list([]) == []\n    assert incr_list([0]) == [1]\n    assert incr_list([-1, -2, -3]) == [-0, -1, -2]", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:22:11.954195\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_42.py\": {\"executed_lines\": [3, 11], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"incr_list\": {\"executed_lines\": [11], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [3], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [3, 11], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/154", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_154.py` instead of redefining it.\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_154 import cycpattern_check\n\ndef test_cycpattern_check():\n    assert cycpattern_check(\"abcd\",\"abd\") == False\n    assert cycpattern_check(\"hello\",\"ell\") == True\n    assert cycpattern_check(\"whassup\",\"psus\") == False\n    assert cycpattern_check(\"abab\",\"baa\") == True\n    assert cycpattern_check(\"efef\",\"eeff\") == False\n    assert cycpattern_check(\"himenss\",\"simen\") == True\n\n# Run the test\npytest.main([__file__])", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:22:23.066808\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_154.py\": {\"executed_lines\": [2, 13, 14, 15, 16, 17, 18, 19], \"summary\": {\"covered_lines\": 8, \"num_statements\": 8, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"cycpattern_check\": {\"executed_lines\": [13, 14, 15, 16, 17, 18, 19], \"summary\": {\"covered_lines\": 7, \"num_statements\": 7, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 13, 14, 15, 16, 17, 18, 19], \"summary\": {\"covered_lines\": 8, \"num_statements\": 8, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 8, \"num_statements\": 8, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/137", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_137.py` instead of redefining it.\n\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_137 import compare_one\n\ndef test_compare_one():\n    assert compare_one(1, 2.5) == 2.5\n    assert compare_one(1, \"2,3\") == \"2,3\"\n    assert compare_one(\"5,1\", \"6\") == \"6\"\n    assert compare_one(\"1\", 1) == None\n    assert compare_one(5, 5) == None\n    assert compare_one(\"5\", \"5\") == None\n    assert compare_one(\"1.2\", \"2\") == \"2\"", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:22:45.869056\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_137.py\": {\"executed_lines\": [2, 15, 16, 17, 18, 19], \"summary\": {\"covered_lines\": 6, \"num_statements\": 6, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"compare_one\": {\"executed_lines\": [15, 16, 17, 18, 19], \"summary\": {\"covered_lines\": 5, \"num_statements\": 5, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 15, 16, 17, 18, 19], \"summary\": {\"covered_lines\": 6, \"num_statements\": 6, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 6, \"num_statements\": 6, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/126", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_126.py` instead of redefining it.\n\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_126 import is_sorted\n\ndef test_is_sorted():\n    assert is_sorted([5]) == True\n    assert is_sorted([1, 2, 3, 4, 5]) == True\n    assert is_sorted([1, 3, 2, 4, 5]) == False\n    assert is_sorted([1, 2, 3, 4, 5, 6]) == True\n    assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n    assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\n    assert is_sorted([1, 2, 2, 3, 3, 4]) == True\n    assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:23:02.383152\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_126.py\": {\"executed_lines\": [2, 19, 20, 21, 22, 23, 24, 25, 27], \"summary\": {\"covered_lines\": 9, \"num_statements\": 9, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"is_sorted\": {\"executed_lines\": [19, 20, 21, 22, 23, 24, 25, 27], \"summary\": {\"covered_lines\": 8, \"num_statements\": 8, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 19, 20, 21, 22, 23, 24, 25, 27], \"summary\": {\"covered_lines\": 9, \"num_statements\": 9, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 9, \"num_statements\": 9, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/140", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_140.py` instead of redefining it.\n\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_140 import fix_spaces\n\ndef test_fix_spaces():\n    assert fix_spaces(\"Example\") == \"Example\"\n    assert fix_spaces(\"Example 1\") == \"Example_1\"\n    assert fix_spaces(\" Example 2\") == \"_Example_2\"\n    assert fix_spaces(\" Example   3\") == \"_Example-3\"\n    assert fix_spaces(\"  Example  4  \") == \"--_Example-4--\"\n    assert fix_spaces(\"This is a longer test example with multiple    spaces\") == \"This_is_a_longer_test_example_with_multiple-spaces\"\n    assert fix_spaces(\"\") == \"\"", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:23:20.323835\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_140.py\": {\"executed_lines\": [2, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33], \"summary\": {\"covered_lines\": 18, \"num_statements\": 19, \"percent_covered\": 94.73684210526316, \"percent_covered_display\": \"95\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [30], \"excluded_lines\": [], \"functions\": {\"fix_spaces\": {\"executed_lines\": [14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33], \"summary\": {\"covered_lines\": 17, \"num_statements\": 18, \"percent_covered\": 94.44444444444444, \"percent_covered_display\": \"94\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [30], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33], \"summary\": {\"covered_lines\": 18, \"num_statements\": 19, \"percent_covered\": 94.73684210526316, \"percent_covered_display\": \"95\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [30], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 18, \"num_statements\": 19, \"percent_covered\": 94.73684210526316, \"percent_covered_display\": \"95\", \"missing_lines\": 1, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/88", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_88.py` instead of redefining it.\n\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_88 import sort_array\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:23:37.062138\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_88.py\": {\"executed_lines\": [2, 18], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"sort_array\": {\"executed_lines\": [18], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 18], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/17", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_17.py` instead of redefining it.\n\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_17 import parse_music\n\ndef test_parse_music():\n    assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    assert parse_music('o| o| o| o|') == [2, 2, 2, 2]\n    assert parse_music('o o o o') == [4, 4, 4, 4]\n    assert parse_music('o| .| o .|') == [2, 1, 2, 1]\n    assert parse_music('o o| .| o| o| o o') == [4, 2, 1, 2, 2, 4, 4]\n    assert parse_music('') == []\n    assert parse_music('o o| .| o| o| .| .| .| .| o o ') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:23:57.570007\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_17.py\": {\"executed_lines\": [1, 4, 18, 19], \"summary\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"parse_music\": {\"executed_lines\": [18, 19], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [1, 4], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [1, 4, 18, 19], \"summary\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/13", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_13.py` instead of redefining it.\n\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n    return a\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_13 import greatest_common_divisor\n\ndef test_greatest_common_divisor():\n    assert greatest_common_divisor(3, 5) == 1\n    assert greatest_common_divisor(25, 15) == 5\n    assert greatest_common_divisor(100, 50) == 50\n    assert greatest_common_divisor(7, 9) == 1\n    assert greatest_common_divisor(111, 222) == 111", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:24:10.806618\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_13.py\": {\"executed_lines\": [3, 11, 12, 13], \"summary\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"greatest_common_divisor\": {\"executed_lines\": [11, 12, 13], \"summary\": {\"covered_lines\": 3, \"num_statements\": 3, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [3], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [3, 11, 12, 13], \"summary\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/61", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_61.py` instead of redefining it.\n\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_61 import correct_bracketing\n\ndef test_correct_bracketing():\n    assert correct_bracketing(\"(\") == False\n    assert correct_bracketing(\"()\") == True\n    assert correct_bracketing(\"(()())\") == True\n    assert correct_bracketing(\")(()\") == False", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:24:17.718853\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_61.py\": {\"executed_lines\": [3, 17, 18, 19, 20, 22, 23, 24, 25], \"summary\": {\"covered_lines\": 9, \"num_statements\": 9, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"correct_bracketing\": {\"executed_lines\": [17, 18, 19, 20, 22, 23, 24, 25], \"summary\": {\"covered_lines\": 8, \"num_statements\": 8, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [3], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [3, 17, 18, 19, 20, 22, 23, 24, 25], \"summary\": {\"covered_lines\": 9, \"num_statements\": 9, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 9, \"num_statements\": 9, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/57", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_57.py` instead of redefining it.\n\n\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_57 import monotonic\n\ndef test_monotonic():\n    assert monotonic([1, 2, 4, 20]) == True\n    assert monotonic([1, 20, 4, 10]) == False\n    assert monotonic([4, 1, 0, -10]) == True", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:24:24.843634\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_57.py\": {\"executed_lines\": [3, 13, 14, 15], \"summary\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"monotonic\": {\"executed_lines\": [13, 14, 15], \"summary\": {\"covered_lines\": 3, \"num_statements\": 3, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [3], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [3, 13, 14, 15], \"summary\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 4, \"num_statements\": 4, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/125", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_125.py` instead of redefining it.\n\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_125 import split_words\n\ndef test_split_words():\n    assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"abcdef\") == 3\n    assert split_words(\"Hello, world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"abc,def\") == [\"abc\", \"def\"]\n    assert split_words(\"abcdef\") == 3", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:24:34.581956\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_125.py\": {\"executed_lines\": [2, 13, 14, 15, 16, 18], \"summary\": {\"covered_lines\": 6, \"num_statements\": 6, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"split_words\": {\"executed_lines\": [13, 14, 15, 16, 18], \"summary\": {\"covered_lines\": 5, \"num_statements\": 5, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 13, 14, 15, 16, 18], \"summary\": {\"covered_lines\": 6, \"num_statements\": 6, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 6, \"num_statements\": 6, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/5", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_5.py` instead of redefining it.\n\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_5 import intersperse\n\ndef test_intersperse_empty_list():\n    assert intersperse([], 4) == []\n\ndef test_intersperse_single_element():\n    assert intersperse([1], 4) == [1]\n\ndef test_intersperse_multiple_elements():\n    assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n\ndef test_intersperse_negative_numbers():\n    assert intersperse([-1, -2, -3], 0) == [-1, 0, -2, 0, -3]\n\ndef test_intersperse_zero():\n    assert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:24:56.802149\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_5.py\": {\"executed_lines\": [1, 4, 12, 13, 15, 17, 18, 19, 21, 23], \"summary\": {\"covered_lines\": 10, \"num_statements\": 10, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"intersperse\": {\"executed_lines\": [12, 13, 15, 17, 18, 19, 21, 23], \"summary\": {\"covered_lines\": 8, \"num_statements\": 8, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [1, 4], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [1, 4, 12, 13, 15, 17, 18, 19, 21, 23], \"summary\": {\"covered_lines\": 10, \"num_statements\": 10, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 10, \"num_statements\": 10, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/84", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_84.py` instead of redefining it.\n\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_84 import solve\n\ndef test_solve():\n    assert solve(1000) == \"1\"\n    assert solve(150) == \"110\"\n    assert solve(147) == \"1100\"\n    assert solve(0) == \"0\"\n    assert solve(9999) == \"1001110001101\"", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:25:09.074412\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_84.py\": {\"executed_lines\": [2, 17], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"solve\": {\"executed_lines\": [17], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 17], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/39", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_39.py` instead of redefining it.\n\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_39 import prime_fib\n\ndef test_prime_fib():\n    assert prime_fib(1) == 2\n    assert prime_fib(2) == 3\n    assert prime_fib(3) == 5\n    assert prime_fib(4) == 13\n    assert prime_fib(5) == 89", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:25:26.429521\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_39.py\": {\"executed_lines\": [3, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], \"summary\": {\"covered_lines\": 16, \"num_statements\": 16, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"prime_fib\": {\"executed_lines\": [18, 20, 27, 28, 29, 30, 31, 32, 33], \"summary\": {\"covered_lines\": 9, \"num_statements\": 9, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"prime_fib.is_prime\": {\"executed_lines\": [21, 22, 23, 24, 25, 26], \"summary\": {\"covered_lines\": 6, \"num_statements\": 6, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [3], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [3, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], \"summary\": {\"covered_lines\": 16, \"num_statements\": 16, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 16, \"num_statements\": 16, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/161", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_161.py` instead of redefining it.\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_161 import solve\n\ndef test_solve():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"aBc\") == \"AbC\"", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:25:37.784194\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_161.py\": {\"executed_lines\": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], \"summary\": {\"covered_lines\": 15, \"num_statements\": 15, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"solve\": {\"executed_lines\": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], \"summary\": {\"covered_lines\": 14, \"num_statements\": 14, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], \"summary\": {\"covered_lines\": 15, \"num_statements\": 15, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 15, \"num_statements\": 15, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/106", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_106.py` instead of redefining it.\n\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_106 import f\n\ndef test_f():\n    assert f(1) == [1]\n    assert f(2) == [1, 2]\n    assert f(3) == [1, 2, 6]\n    assert f(4) == [1, 2, 6, 10]\n    assert f(5) == [1, 2, 6, 10, 15]\n    assert f(6) == [1, 2, 6, 10, 15, 21]", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:25:54.518552\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_106.py\": {\"executed_lines\": [2, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22], \"summary\": {\"covered_lines\": 11, \"num_statements\": 11, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"f\": {\"executed_lines\": [12, 13, 14, 15, 16, 17, 19, 20, 21, 22], \"summary\": {\"covered_lines\": 10, \"num_statements\": 10, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22], \"summary\": {\"covered_lines\": 11, \"num_statements\": 11, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 11, \"num_statements\": 11, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/21", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_21.py` instead of redefining it.\n\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_21 import rescale_to_unit\n\ndef test_rescale_to_unit():\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_to_unit([0.0, 0.0, 0.0, 0.0, 0.0]) == [0.0, 0.0, 0.0, 0.0, 0.0]\n    assert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescalecale_to_unit([-1.0, 0.0, 1.0]) == [0.0, 0.5, 1.0]", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:26:16.198399\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_21.py\": {\"executed_lines\": [1, 4, 11, 12, 13], \"summary\": {\"covered_lines\": 5, \"num_statements\": 5, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": [], \"functions\": {\"rescale_to_unit\": {\"executed_lines\": [11, 12, 13], \"summary\": {\"covered_lines\": 3, \"num_statements\": 3, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}, \"\": {\"executed_lines\": [1, 4], \"summary\": {\"covered_lines\": 2, \"num_statements\": 2, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [1, 4, 11, 12, 13], \"summary\": {\"covered_lines\": 5, \"num_statements\": 5, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 5, \"num_statements\": 5, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}}"}
{"task_id": "HumanEval/58", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_58.py` instead of redefining it.\n\n\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n\n\n### Response:\n", "response": "You can import the function from the module and then write pytest tests for it. Here is a sample pytest test suite:", "coverage": null}
{"task_id": "HumanEval/102", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a pytest test suite for the following code.\n\nOnly write unit tests in the output and nothing else.Import the function from the module `HumanEval_102.py` instead of redefining it.\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n\n\n### Response:\n", "response": "import pytest\nfrom HumanEval_102 import choose_num\n\ndef test_choose_num():\n    assert choose_num(12, 15) == 14\n    assert choose_num(13, 12) == -1\n    assert choose_num(14, 14) == -1\n    assert choose_num(15, 12) == 14\n    assert choose_num(16, 18) == 16\n    assert choose_num(17, 15) == 14\n    assert choose_num(18, 20) == 18\n    assert choose_num(23, 21) == -1\n    assert choose_num(22, 22) == -1\n    assert choose_num(21, 19) == 18", "coverage": "{\"meta\": {\"format\": 3, \"version\": \"7.11.0\", \"timestamp\": \"2025-10-19T23:27:02.757967\", \"branch_coverage\": false, \"show_contexts\": false}, \"files\": {\"HumanEval_102.py\": {\"executed_lines\": [2, 12, 13, 14, 15, 16, 18], \"summary\": {\"covered_lines\": 7, \"num_statements\": 8, \"percent_covered\": 87.5, \"percent_covered_display\": \"88\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [17], \"excluded_lines\": [], \"functions\": {\"choose_num\": {\"executed_lines\": [12, 13, 14, 15, 16, 18], \"summary\": {\"covered_lines\": 6, \"num_statements\": 7, \"percent_covered\": 85.71428571428571, \"percent_covered_display\": \"86\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [17], \"excluded_lines\": []}, \"\": {\"executed_lines\": [2], \"summary\": {\"covered_lines\": 1, \"num_statements\": 1, \"percent_covered\": 100.0, \"percent_covered_display\": \"100\", \"missing_lines\": 0, \"excluded_lines\": 0}, \"missing_lines\": [], \"excluded_lines\": []}}, \"classes\": {\"\": {\"executed_lines\": [2, 12, 13, 14, 15, 16, 18], \"summary\": {\"covered_lines\": 7, \"num_statements\": 8, \"percent_covered\": 87.5, \"percent_covered_display\": \"88\", \"missing_lines\": 1, \"excluded_lines\": 0}, \"missing_lines\": [17], \"excluded_lines\": []}}}}, \"totals\": {\"covered_lines\": 7, \"num_statements\": 8, \"percent_covered\": 87.5, \"percent_covered_display\": \"88\", \"missing_lines\": 1, \"excluded_lines\": 0}}"}
